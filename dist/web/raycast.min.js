var raycast =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/web/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var _this = this;
	var Utils_1 = __webpack_require__(2);
	// default castRays configuration
	var defaultConfig = {
	    count: 256,
	    fov: 60,
	    fisheye: false
	};
	/**
	 * Cast one ray from position until test fails
	 * @param {Array<Array<number>>} map - 2d world on which will be casted ray
	 * @param {number} x - coordinate in map
	 * @param {number} y - coordinate in map
	 * @param {testintersection} intersection - test function is called on every intersection. If fails, fuction will return IRay
	 * @param {number} rayRot - rot of ray in radians
	 * @return {IRay} information about ray, check IRay type
	 */
	exports.castRay = function (map, x, y, intersection, rayRot) {
	    var angleSin = Math.sin(rayRot);
	    var angleCos = Math.cos(rayRot);
	    var quadrant = Utils_1.getQuadrant(rayRot); // in which quadrant is ray looking to
	    // current cell position in map
	    var column = Math.floor(x);
	    var row = Math.floor(y);
	    var hSlope = (angleSin / angleCos); // tan
	    var vSlope = (angleCos / angleSin); // ctan
	    // horizontal intersection with cell
	    var stepX = (quadrant.right) ? 1 : -1;
	    var hdY = stepX * hSlope;
	    // vertical intersection with cell
	    var stepY = (quadrant.top) ? -1 : 1;
	    var vdX = stepY * vSlope;
	    // first horizontal intesection world coordinates in world
	    var hHitX = (quadrant.right) ? Math.ceil(x) : column;
	    var hHitY = y + ((hHitX - x) * hSlope);
	    // first vertical intersection world coordinates in world
	    var vHitY = (quadrant.top) ? row : Math.ceil(y);
	    var vHitX = x + ((vHitY - y) * vSlope);
	    // distance from current point to nearest x || y side
	    var sideDistX = Math.sqrt(Math.pow((hHitX - x), 2) + Math.pow((hHitY - y), 2));
	    var sideDistY = Math.sqrt(Math.pow((vHitX - x), 2) + Math.pow((vHitY - y), 2));
	    // distance from x || y  side to another x || y side
	    var deltaDistX = Math.sqrt(Math.pow(stepX, 2) + Math.pow(hdY, 2));
	    var deltaDistY = Math.sqrt(Math.pow(vdX, 2) + Math.pow(stepY, 2));
	    var side = (sideDistX < sideDistY) ? 0 : 1; // NS or WE wall hit ?
	    var dist = (sideDistX < sideDistY) ? sideDistX : sideDistY; // initial distance from caster to intersection
	    var i = 0; // number of intersections
	    // @todo send hitX and hitY to test function
	    while (intersection(row, column, dist, i)) {
	        if (sideDistX < sideDistY) {
	            sideDistX += deltaDistX;
	            hHitX += stepX;
	            hHitY += hdY;
	            // vars passed to testfunction
	            column += stepX;
	            dist = sideDistX;
	            side = 0;
	        }
	        else {
	            sideDistY += deltaDistY;
	            vHitX += vdX;
	            vHitY += stepY;
	            // vars passed to testfunction
	            row += stepY;
	            dist = sideDistY;
	            side = 1;
	        }
	        i++;
	    }
	    return {
	        // ray distance from caster
	        dist: (!side)
	            ? (sideDistX - deltaDistX)
	            : (sideDistY - deltaDistY),
	        // side, which was hit. NS or WE
	        side: side,
	        // ray x hit
	        x: (side)
	            ? (vHitX - vdX)
	            : (hHitX - stepX),
	        // ray y hit
	        y: (side)
	            ? (vHitY - stepY)
	            : (hHitY - hdY),
	        // ray rot
	        rot: rayRot,
	        // ray row hit
	        row: row,
	        // ray column hit
	        column: column
	    };
	};
	/**
	 * Cast rays from position in world
	 * @param {Array<Array<number>>} map - 2d world on which will be casted ray
	 * @param {number} x - camera coordinate in map
	 * @param {number} y - camera coordinate in map
	 * @param {testintersection} intersection - this function is called on every ray's intersection. If fail, fuction will return IRay
	 * @param {IRayConf} config - additional configuration
	 * @return {Array<IRay>} all rays casted from position, check IRay type
	 */
	exports.castRays = function (map, x, y, rot, intersection, config) {
	    if (config === void 0) { config = defaultConfig; }
	    var castRayFromPosition = exports.castRay.bind(_this, map, x, y, intersection);
	    var dRot = (Math.PI / (180 / config.fov)) / config.count; // difference between each ray rot
	    var center = rot - dRot * (config.count / 2) + (dRot / 2);
	    var rays = []; // casted rays
	    var i = 0;
	    if (config.fisheye) {
	        while (i < config.count) {
	            // it's important to normalize rot before casting it, to make sure that rot will continue in direction
	            rays.push(castRayFromPosition(Utils_1.normalizeAngle(i * dRot + center)));
	            i++;
	        }
	    }
	    else {
	        while (i < config.count) {
	            // it's important to normalize rot before casting it, to make sure that rot will continue in direction
	            // also remove fisheye effect
	            rays.push(Utils_1.removeFisheye(castRayFromPosition(Utils_1.normalizeAngle(i * dRot + center)), rot));
	            i++;
	        }
	    }
	    return rays;
	};
	exports.__esModule = true;
	exports["default"] = {
	    castRay: exports.castRay,
	    castRays: exports.castRays
	};


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	var twoPI = Math.PI * 2;
	/**
	 * From which quadrant are we looking out ?
	 * @param {number} rot
	 * @return {IQuadrant}
	 */
	exports.getQuadrant = function (rot) { return ({
	    top: ((rot < 0) || (rot > Math.PI)) ? true : false,
	    right: ((rot > (twoPI * 0.75)) || (rot < (twoPI * 0.25))) ? true : false
	}); };
	/**
	 * Normalize angle to be between <0, 2*Math.Pi>
	 * @param {number} rot - rot to normalize, in radians
	 * @return {number} normalized rot
	 */
	exports.normalizeAngle = function (rot) {
	    var rayAngle = rot % twoPI;
	    return (rayAngle < 0)
	        ? twoPI + rayAngle
	        : rayAngle;
	};
	/**
	 * Remove fisheye effect
	 * @param {IRay} ray - ray to fix
	 * @param {number} camRot - camera rot
	 * @return {IRay} fixed ray
	 */
	exports.removeFisheye = function (ray, camRot) {
	    ray.dist = ray.dist * Math.cos(camRot - ray.rot);
	    return ray;
	};
	exports.__esModule = true;
	exports["default"] = {
	    getQuadrant: exports.getQuadrant,
	    normalizeAngle: exports.normalizeAngle,
	    removeFisheye: exports.removeFisheye
	};


/***/ }
/******/ ]);